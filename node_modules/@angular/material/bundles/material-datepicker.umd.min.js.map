{"version":3,"file":"material-datepicker.umd.min.js","sources":["../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir?: Directionality) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getConnectedOverlayOrigin(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /** @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n"],"names":["monthSelected","type","Output","_userSelection","monthView","ViewChild","args","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","MatCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","InjectionToken","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","MatDatepickerContent","prototype","ngAfterContentInit","this","_calendar","_focusActiveCell","Component","selector","template","styles","host","class","[class.mat-datepicker-content-touch]","exportAs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","_overlay","_ngZone","_viewContainerRef","_scrollStrategy","_dateAdapter","_dir","_document","createMissingDateImplError","Object","defineProperty","MatDatepicker","get","set","enumerable","configurable","newValue","_disabled","_disabledChange","next","_inputSubscription","unsubscribe","complete","_popupRef","dispose","_selected","date","sameDate","oldValue","selectedChanged","emit","_datepickerInput","Error","input","_valueChange","subscribe","value","_this","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_opened","openedStream","hasAttached","detach","_dialogRef","close","_calendarPortal","isAttached","completeClose","closedStream","focus","viewContainerRef","panelClass","afterClosed","componentInstance","datepicker","_createPopup","attach","instance","onStable","asObservable","pipe","take","hasBackdrop","backdropClass","direction","scrollStrategy","create","overlayConfig","merge","backdropClick","detachments","keydownEvents","filter","event","keyCode","ESCAPE","withFallbackPosition","originX","originY","overlayX","overlayY","decorators","ctorParameters","MatDialog","undefined","Inject","DateAdapter","Optional","Directionality","DOCUMENT","propDecorators","startAt","Input","startView","yearSelected","opened","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_elementRef","_dateFormats","_formField","dateChange","EventEmitter","dateInput","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","Subscription","EMPTY","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","nativeElement","_minValidator","control","controlValue","_getValidDateOrNull","deserialize","min","compareDate","matDatepickerMin","actual","_maxValidator","max","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","_value","isValid","oldDate","format","display","_min","_max","coerceBooleanProperty","selected","ngOnDestroy","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","getConnectedOverlayOrigin","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","disabled","_onKeydown","altKey","DOWN_ARROW","open","preventDefault","_onInput","parse","_onChange","obj","isDateInstance","Directive","providers","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","ElementRef","MAT_DATE_FORMATS","MatFormField","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_intl","_changeDetectorRef","_stateChanges","ngOnChanges","changes","_watchStateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","markForCheck","[class.mat-datepicker-toggle-active]","_customIcon","ContentChild","MatDatepickerModule","NgModule","imports","CommonModule","MatButtonModule","MatDialogModule","OverlayModule","A11yModule","exports","MatCalendarBody","declarations","MatDatepickerIntl","entryComponents","provider","overlay","scrollStrategies","reposition","Subject","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","Injectable","MatCalendarCell","displayValue","ariaLabel","enabled","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","rows","length","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","role","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","selectedChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","map","long","i","narrow","_weekdays","slice","concat","_activeDate","today","oldActiveDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","push","_shouldEnableDate","dateA11yLabel","dateFilter","minDate","maxDate","getDate","d1","d2","ChangeDetectorRef","Math","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","addCalendarDays","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","changeDetectorRef","_intlChanges","_startAt","_clampedActiveDate","clampDate","_currentView","monthYearLabel","multi-year","change","firstChange","view","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","runOutsideAngular","querySelector","date1","date2","isRtl","_isRtl","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","HOME","END","PAGE_UP","PAGE_DOWN","ENTER","yearsPerPage","NgZone"],"mappings":"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"}